{"ast":null,"code":"var _jsxFileName = \"C:\\\\Full stack Round 2\\\\part2.1-2.5\\\\src\\\\components\\\\Course.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*\r\nconst Course = ({ course}) => {\r\n    const total = course.reduce(\r\n        (a, b) => a + b.parts.exercises,\r\n        0\r\n    );\r\n  \r\nreturn (\r\n    <div>\r\n            {course.map(index =>\r\n        <ul key={index.id}>\r\n        {index.name}\r\n         </ul>\r\n            )} \r\n          {course.map(index =>\r\n          <ul key={index.parts}>\r\n              {console.log(index.exercises)}\r\n              {index.exercises}\r\n          </ul>\r\n            )}  \r\n            total of {total} exercises\r\n           \r\n    </div>\r\n)\r\n}\r\n*/\n\n/*\r\nconst Sum = ({course}) => {\r\n    const sum = course.map(part => part.exercises)\r\n\r\n    return (\r\n        <div>\r\n      Total {sum.reduce((a,b) => a +b)} of exercises\r\n        </div>\r\n    )\r\n}\r\n*/\n\n/*\r\nconst Header = ({course}) => {\r\n    const parts = course.map(index => index.parts)\r\n    const buffer = []\r\n    const buffer1 = []\r\n    \r\n   for (var i = 0; i < parts.length; i++) {\r\n       const name = parts[i].map(index => index.name)\r\n       const exercises = parts[i].map(index => index.exercises)\r\n       buffer.push(<div>{name}</div>)\r\n       buffer1.push(<div>{exercises}</div>)\r\n   }\r\n    return (\r\n<div>\r\n   {buffer.map(index => \r\n    <ul key={index.id} >\r\n        <li> {index}</li>\r\n    </ul>\r\n    )}\r\n    {buffer1.map(index => \r\n       <ul key={index.id}>\r\n       <li> {index}</li>\r\n       </ul>\r\n       )}\r\n</div>\r\n    )\r\n}\r\n*/\nconst Header = course => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: course.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Header;\n\nconst Content = course => {\n  console.log(course.parts);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: course.parts.map(index => /*#__PURE__*/_jsxDEV(Part, {\n      exercises: index.exercises,\n      name: index.name\n    }, index.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 34\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 6\n  }, this);\n};\n\n_c2 = Content;\n\nconst Part = props => {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.name, \" \", props.exercises]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Part;\n\nconst Total = course => {\n  const sum = course.parts.map(index => index.exercises);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"total of \", sum.reduce((a, b) => a + b), \" exercises\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_c4 = Total;\n\nconst Course = _ref => {\n  let {\n    course\n  } = _ref;\n  console.log(course);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Total, {\n      course: course\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      course: course\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      course: course\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_c5 = Course;\nexport default Course;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"Part\");\n$RefreshReg$(_c4, \"Total\");\n$RefreshReg$(_c5, \"Course\");","map":{"version":3,"sources":["C:/Full stack Round 2/part2.1-2.5/src/components/Course.js"],"names":["Header","course","name","Content","console","log","parts","map","index","exercises","id","Part","props","Total","sum","reduce","a","b","Course"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAIC,MAAD,IAAY;AACvB,sBACA;AAAA,cACKA,MAAM,CAACC;AADZ;AAAA;AAAA;AAAA;AAAA,UADA;AAKH,CAND;;KAAMF,M;;AAQN,MAAMG,OAAO,GAAIF,MAAD,IAAY;AACzBG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,KAAnB;AACF,sBACI;AAAA,cACEL,MAAM,CAACK,KAAP,CAAaC,GAAb,CAAiBC,KAAK,iBAAI,QAAC,IAAD;AAAqB,MAAA,SAAS,EAAEA,KAAK,CAACC,SAAtC;AAAiD,MAAA,IAAI,EAAED,KAAK,CAACN;AAA7D,OAAWM,KAAK,CAACE,EAAjB;AAAA;AAAA;AAAA;AAAA,YAA1B;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAKA,CAPD;;MAAMP,O;;AASN,MAAMQ,IAAI,GAAIC,KAAD,IAAW;AACpBR,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,sBACA;AAAA,eACKA,KAAK,CAACV,IADX,OACkBU,KAAK,CAACH,SADxB;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAKH,CAPD;;MAAME,I;;AASN,MAAME,KAAK,GAAIZ,MAAD,IAAY;AACtB,QAAMa,GAAG,GAAGb,MAAM,CAACK,KAAP,CAAaC,GAAb,CAAiBC,KAAK,IAAIA,KAAK,CAACC,SAAhC,CAAZ;AAEA,sBACI;AAAA,4BACcK,GAAG,CAACC,MAAJ,CAAW,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAAGC,CAAxB,CADd;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CARD;;MAAMJ,K;;AAUN,MAAMK,MAAM,GAAG,QAAc;AAAA,MAAb;AAACjB,IAAAA;AAAD,GAAa;AAE3BG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACE,sBACI;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,OAAD;AAAS,MAAA,MAAM,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAVD;;MAAMiB,M;AAYN,eAAeA,MAAf","sourcesContent":["/*\r\nconst Course = ({ course}) => {\r\n    const total = course.reduce(\r\n        (a, b) => a + b.parts.exercises,\r\n        0\r\n    );\r\n  \r\nreturn (\r\n    <div>\r\n            {course.map(index =>\r\n        <ul key={index.id}>\r\n        {index.name}\r\n         </ul>\r\n            )} \r\n          {course.map(index =>\r\n          <ul key={index.parts}>\r\n              {console.log(index.exercises)}\r\n              {index.exercises}\r\n          </ul>\r\n            )}  \r\n            total of {total} exercises\r\n           \r\n    </div>\r\n)\r\n}\r\n*/\r\n\r\n\r\n/*\r\nconst Sum = ({course}) => {\r\n    const sum = course.map(part => part.exercises)\r\n\r\n    return (\r\n        <div>\r\n      Total {sum.reduce((a,b) => a +b)} of exercises\r\n        </div>\r\n    )\r\n}\r\n*/\r\n\r\n\r\n/*\r\nconst Header = ({course}) => {\r\n    const parts = course.map(index => index.parts)\r\n    const buffer = []\r\n    const buffer1 = []\r\n    \r\n   for (var i = 0; i < parts.length; i++) {\r\n       const name = parts[i].map(index => index.name)\r\n       const exercises = parts[i].map(index => index.exercises)\r\n       buffer.push(<div>{name}</div>)\r\n       buffer1.push(<div>{exercises}</div>)\r\n   }\r\n    return (\r\n<div>\r\n   {buffer.map(index => \r\n    <ul key={index.id} >\r\n        <li> {index}</li>\r\n    </ul>\r\n    )}\r\n    {buffer1.map(index => \r\n       <ul key={index.id}>\r\n       <li> {index}</li>\r\n       </ul>\r\n       )}\r\n</div>\r\n    )\r\n}\r\n*/\r\n\r\nconst Header = (course) => {\r\n    return (\r\n    <h1>\r\n        {course.name}\r\n    </h1>\r\n    )\r\n}\r\n\r\nconst Content = (course) => {\r\n   console.log(course.parts)\r\n return (\r\n     <div>\r\n      {course.parts.map(index => <Part key={index.id} exercises={index.exercises} name={index.name} />)}\r\n     </div>\r\n )\r\n}\r\n\r\nconst Part = (props) => {\r\n    console.log(props)\r\n    return (\r\n    <div>\r\n        {props.name} {props.exercises}\r\n    </div>\r\n    )\r\n}\r\n\r\nconst Total = (course) => {\r\n    const sum = course.parts.map(index => index.exercises)\r\n\r\n    return (\r\n        <div>\r\n            total of {sum.reduce((a,b) => a + b)} exercises\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Course = ({course}) => { \r\n\r\n  console.log(course)\r\n    return (\r\n        <div>\r\n            <Total course={course} />\r\n            <Header course={course} />\r\n            <Content course={course} /> \r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Course"]},"metadata":{},"sourceType":"module"}