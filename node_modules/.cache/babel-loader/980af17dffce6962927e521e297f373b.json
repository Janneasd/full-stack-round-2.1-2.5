{"ast":null,"code":"var _jsxFileName = \"C:\\\\Full stack Round 2\\\\part2.1-2.5\\\\src\\\\components\\\\Course.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*\r\nconst Course = ({ course}) => {\r\n    const total = course.reduce(\r\n        (a, b) => a + b.parts.exercises,\r\n        0\r\n    );\r\n  \r\nreturn (\r\n    <div>\r\n            {course.map(index =>\r\n        <ul key={index.id}>\r\n        {index.name}\r\n         </ul>\r\n            )} \r\n          {course.map(index =>\r\n          <ul key={index.parts}>\r\n              {console.log(index.exercises)}\r\n              {index.exercises}\r\n          </ul>\r\n            )}  \r\n            total of {total} exercises\r\n           \r\n    </div>\r\n)\r\n}\r\n*/\n\n/*\r\nconst Sum = ({course}) => {\r\n    const sum = course.map(part => part.exercises)\r\n\r\n    return (\r\n        <div>\r\n      Total {sum.reduce((a,b) => a +b)} of exercises\r\n        </div>\r\n    )\r\n}\r\n*/\n\n/*\r\nconst Header = ({course}) => {\r\n    const parts = course.map(index => index.parts)\r\n    const buffer = []\r\n    const buffer1 = []\r\n    \r\n   for (var i = 0; i < parts.length; i++) {\r\n       const name = parts[i].map(index => index.name)\r\n       const exercises = parts[i].map(index => index.exercises)\r\n       buffer.push(<div>{name}</div>)\r\n       buffer1.push(<div>{exercises}</div>)\r\n   }\r\n    return (\r\n<div>\r\n   {buffer.map(index => \r\n    <ul key={index.id} >\r\n        <li> {index}</li>\r\n    </ul>\r\n    )}\r\n    {buffer1.map(index => \r\n       <ul key={index.id}>\r\n       <li> {index}</li>\r\n       </ul>\r\n       )}\r\n</div>\r\n    )\r\n}\r\n*/\n\n/*\r\nconst Header = (course) => {\r\n    return (\r\n    <h1>\r\n        {course.name}\r\n    </h1>\r\n    )\r\n}\r\n\r\nconst Content = (course) => {\r\n   console.log(course.parts)\r\n return (\r\n     <div>\r\n      {course.parts.map(index => <Part key={index.id} exercises={index.exercises} name={index.name} />)}\r\n     </div>\r\n )\r\n}\r\n\r\nconst Part = (props) => {\r\n    console.log(props)\r\n    return (\r\n    <div>\r\n        {props.name} {props.exercises}\r\n    </div>\r\n    )\r\n}\r\n\r\nconst Total = (course) => {\r\n    const sum = course.parts.map(index => index.exercises)\r\n\r\n    return (\r\n        <div>\r\n            total of {sum.reduce((a,b) => a + b)} exercises\r\n        </div>\r\n    )\r\n}\r\n*/\nconst Course = _ref => {\n  let {\n    course\n  } = _ref;\n  console.log(course);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Course;\nexport default Course;\n\nvar _c;\n\n$RefreshReg$(_c, \"Course\");","map":{"version":3,"sources":["C:/Full stack Round 2/part2.1-2.5/src/components/Course.js"],"names":["Course","course","console","log"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,GAAG,QAAc;AAAA,MAAb;AAACC,IAAAA;AAAD,GAAa;AAE3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACE,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CARD;;KAAMD,M;AAUN,eAAeA,MAAf","sourcesContent":["/*\r\nconst Course = ({ course}) => {\r\n    const total = course.reduce(\r\n        (a, b) => a + b.parts.exercises,\r\n        0\r\n    );\r\n  \r\nreturn (\r\n    <div>\r\n            {course.map(index =>\r\n        <ul key={index.id}>\r\n        {index.name}\r\n         </ul>\r\n            )} \r\n          {course.map(index =>\r\n          <ul key={index.parts}>\r\n              {console.log(index.exercises)}\r\n              {index.exercises}\r\n          </ul>\r\n            )}  \r\n            total of {total} exercises\r\n           \r\n    </div>\r\n)\r\n}\r\n*/\r\n\r\n\r\n/*\r\nconst Sum = ({course}) => {\r\n    const sum = course.map(part => part.exercises)\r\n\r\n    return (\r\n        <div>\r\n      Total {sum.reduce((a,b) => a +b)} of exercises\r\n        </div>\r\n    )\r\n}\r\n*/\r\n\r\n\r\n/*\r\nconst Header = ({course}) => {\r\n    const parts = course.map(index => index.parts)\r\n    const buffer = []\r\n    const buffer1 = []\r\n    \r\n   for (var i = 0; i < parts.length; i++) {\r\n       const name = parts[i].map(index => index.name)\r\n       const exercises = parts[i].map(index => index.exercises)\r\n       buffer.push(<div>{name}</div>)\r\n       buffer1.push(<div>{exercises}</div>)\r\n   }\r\n    return (\r\n<div>\r\n   {buffer.map(index => \r\n    <ul key={index.id} >\r\n        <li> {index}</li>\r\n    </ul>\r\n    )}\r\n    {buffer1.map(index => \r\n       <ul key={index.id}>\r\n       <li> {index}</li>\r\n       </ul>\r\n       )}\r\n</div>\r\n    )\r\n}\r\n*/\r\n/*\r\nconst Header = (course) => {\r\n    return (\r\n    <h1>\r\n        {course.name}\r\n    </h1>\r\n    )\r\n}\r\n\r\nconst Content = (course) => {\r\n   console.log(course.parts)\r\n return (\r\n     <div>\r\n      {course.parts.map(index => <Part key={index.id} exercises={index.exercises} name={index.name} />)}\r\n     </div>\r\n )\r\n}\r\n\r\nconst Part = (props) => {\r\n    console.log(props)\r\n    return (\r\n    <div>\r\n        {props.name} {props.exercises}\r\n    </div>\r\n    )\r\n}\r\n\r\nconst Total = (course) => {\r\n    const sum = course.parts.map(index => index.exercises)\r\n\r\n    return (\r\n        <div>\r\n            total of {sum.reduce((a,b) => a + b)} exercises\r\n        </div>\r\n    )\r\n}\r\n*/\r\nconst Course = ({course}) => { \r\n\r\n  console.log(course)\r\n    return (\r\n        <div>\r\n           \r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Course"]},"metadata":{},"sourceType":"module"}